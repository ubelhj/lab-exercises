my_age <- 18
my_name <- Joe
my_name <- "Joe"
make_introduction(my_name, my_age)
make_introduction <- function(name, age) {
paste("Hello, my name is", name, "and I'm", age, "years old.")
}
make_introduction(my_name, my_age)
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
# Your script for Part 1 goes here (and delete this comment!)
install.packages("stringr")
# install.packages("stringr")
library("stringr")
capital_intro <- str_to_title(my_intro)
print(capital_intro)
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
books <- c("Ender's Game", "Harry Potter and the Goblet of Fire", "To Kill a Mockingbird", "Alex Rider", "Catch 22", "One Flew over the Cuckoo's Nest")
print(books)
top_three_books <- books[1:3]
print(top_three_books)
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
remove_book <- function(books, index) {
books[-index]
}
books_without_four <- remove(books, 4)
remove_book <- function(books, index) {
books[-index]
}
books_without_four <- remove(books, 4)
books <- c("Ender's Game", "Harry Potter and the Goblet of Fire", "To Kill a Mockingbird", "Alex Rider", "Catch 22", "One Flew over the Cuckoo's Nest")
remove_book <- function(books, index) {
books[-index]
}
books_without_four <- remove(books, 4)
books_without_four <- remove_book(books, 4)
print(books_without_four)
long_titles <- books[nchar(books) > 15]
print(long_titles)
print(books_without_four)
numbers <- 1:201
squared_numbers <- numbers * numbers
squared_mean <- mean(squared_numbers)
squared_median <- median(squared_numbers)
print(squared_mean)
print(squared_median)
squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print(squares)
summer_break <- as.Date("2018-6-9")
today <- Sys.Date()
days_to_break <- summer_break - today
print(days_to_break)
intro_start <- make_introduction(name, age)
intro_start <- make_introduction(name, age)
if (days_until < 0) {
days_until <- days_until + 365
}
days_until <- birthday - today
make_birthday_intro <- function(name, age, birthday) {
intro_start <- make_introduction(name, age)
days_until <- birthday - today
new_age <- age + 1
if (days_until < 0) {
days_until <- days_until + 365
}
paste(intro_start, "In", days_until, "days, I'll be", new_age)
}
my_bday_intro <- make_birthday_intro(name, age, as.Date("2018-5-22"))
my_bday_intro <- make_birthday_intro(my_name, my_age, as.Date("2018-5-22"))
print(my_bday_intro)
person <- list(first_name = "Ada", job = "Programmer", salary = 78000, in_union = TRUE)
print(person()
)
person <- list(first_name = "Ada", job = "Programmer", salary = 78000, in_union = TRUE)
print(person())
print(person)
person$last_name <- "Smith"
print(person)
my_list <- list('A', 201, TRUE, 'rhinoceros')
# SINGLE brackets returns a list
print(my_list[1])
print(my_list[[1]])
my_list[[1]]
# SINGLE brackets returns a list
my_list[1]
# Create a vector `my_breakfast` of everything you ate for breakfast
my_breakfast <- c("French Toast")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast, my_lunch)
# Create a vector `my_lunch` of everything you ate (or will eat) for lunch
my_lunch <- c("PB&J")
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(my_breakfast, my_lunch)
# Add a "dinner" element to your `meals`` list that has what you plan to eat
# for dinner
meals$dinner <- c("Veggie Burger", "Salad")
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$dinner
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[[lunch]]
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1:2]
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals["breakfast", "lunch"]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1:2]
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[4]] <- meals[["lunch"]]
# Create a list `meals` that has contains your breakfast and lunch
meals <- list(breakfast = my_breakfast, lunch = my_lunch)
# Add a "dinner" element to your `meals`` list that has what you plan to eat
# for dinner
meals$dinner <- c("Veggie Burger", "Salad")
# Use double-bracket notation to extract your `lunch` element from your list
# and save it in your list as the element at index 5 (no reason beyond practice)
meals[[5]] <- meals[["lunch"]]
View(meals)
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1:2]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals["breakfast", "lunch"]
# Use single-bracket notation to extract your breakfast and lunch from your list
# and save them to a list called `early_meals`
early_meals <- meals[1:2]
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
number_per_meal <- list(lapply(meals))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
number_per_meal <- list(lapply(meals, length()))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
number_per_meal <- list(lapply(meals, length)
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
number_per_meal <- list(lapply(meals, length))
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
number_per_meal <- list(lapply(meals, length))
# Write a function `add_pizza` that adds pizza to a given meal vector, and
# returns the pizza-fied vector
add_pizza <- function(meal) {
c(meal, "pizza")
}
# Create a list that has the number of items you ate for each meal
# Hint: use the `lappy()` function to apply the `length()` function to each item
number_per_meal <- lapply(meals, length)
# Create a vector `better_meals` that is all your meals, but with pizza!
better_meals <- lapply(meals, add_pizza)
name <- c("Ada", "Bob", "Chris", "Diya", "Emma")
# Vector of heights
height <- 58:62
# Vector of weights
weight <- c(115, 117, 120, 123, 126)
# Combine the vectors into a data.frame
# Note the names of the variables become the names of the columns!
my_data <- data.frame(name, height, weight, stringsAsFactors = FALSE)
name <- c("Ada", "Bob", "Chris", "Diya", "Emma")
# Vector of heights
height <- 58:62
# Vector of weights
weight <- c(115, 117, 120, 123, 126)
# Combine the vectors into a data.frame
# Note the names of the variables become the names of the columns!
my_data <- data.frame(name, height, weight, stringsAsFactors = FALSE)
View(my_data)
View(my_data)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste(Employee, 1:100)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries <- runif(40000, 50000)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries <- runif(1, 40000, 50000)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
new_salaries <- runif(100, -5000, 10000) + salaries
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
old_salaries <- runif(100, 40000, 50000)
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, old_salaries, new_salaries, stringsAsFactors = FALSE)
View(salaries)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
salaries$change <- new_salaries - old_salaries
View(salaries)
View(salaries)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
old_salaries <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
new_salaries <- runif(100, -5000, 10000) + salaries
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, old_salaries, new_salaries, stringsAsFactors = FALSE)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
salaries$change <- new_salaries - old_salaries
View(salaries)
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
salaries$got_raise <- salaries$change > 0
View(salaries)
View(salaries)
# What was the 2018 salary of employee 57
salaries[new_salaries[57]]
# What was the 2018 salary of employee 57
salaries["new_salaries[57]"]
# What was the 2018 salary of employee 57
salaries$new_salaries[57]
# What was the 2018 salary of employee 57
salaries[new_salaries, 57]
# What was the 2018 salary of employee 57
salaries["new_salaries", 57]
# What was the 2018 salary of employee 57
salaries[57, "new_salaries"]
# How many employees got a raise?
salaries[, "got_raise"]
# How many employees got a raise?
salaries[, "got_raise"] == TRUE
# What was the dollar value of the highest raise?
max(salaries$change)
# What was the largest decrease in salaries between the two years?
min(salaries$change)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
new_salaries <- runif(100, 0, 15000) - 5000 + salaries
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
new_salaries <- (runif(100, 0, 15000) - 5000) + salaries
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
new_salaries <- runif(100, 0, 15000) + (salaries - 5000)
# How many employees got a raise?
salaries[, "got_raise"][salaries[, "got_raise"]]
# How many employees got a raise?
length(salaries[, "got_raise"][salaries[, "got_raise"]])
# What was the average salary change?
mean(salaries$change)
# For people who did not get a raise, how much money did they lose on average?
mean(salaries$change[!salaries[, "got_raise"]])
# What was the dollar value of the highest raise?
max(salaries$change)
# What was the "name" of the employee who received the highest raise?
salaries[salaries$change == 16327.21]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$change == 16327.21, ]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$change >= 16327.21, ]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$change = 16327.21, ]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$change >= 16327.21, ]
# What was the largest decrease in salaries between the two years?
min(salaries$change)
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$change <= -10777.08, ]
?runif
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
old_salaries <- runif(100, 40000, 50000)
# Create a vector of 100 salaries in 2018 that have changed from 2017
# Use `runif()` to add a random number between -5000 and 10000 to each of 2017's
# salaries (the negative number means that a salary may have decreased!)
new_salaries <- runif(100, -5000, 10000) + old_salaries
# Create a data frame 'salaries' by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, old_salaries, new_salaries, stringsAsFactors = FALSE)
# Create a column 'change' that stores each person's change in salary between
# 2017 and 2018
salaries$change <- new_salaries - old_salaries
# Create a column 'got_raise' that is TRUE if the person got a raise (their
# salary went up)
salaries$got_raise <- salaries$change > 0
# What was the 2018 salary of employee 57
salaries[57, "new_salaries"]
# How many employees got a raise?
length(salaries[, "got_raise"][salaries[, "got_raise"]])
# What was the dollar value of the highest raise?
max(salaries$change)
# What was the "name" of the employee who received the highest raise?
salaries[salaries$change == 9911.484, ]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$change >= 9911.484, ]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$change >= 9911.484, ]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$change == max(salaries$change), ]
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$change == min(salaries$change), ]
# What was the dollar value of the highest raise?
max(salaries$change)
# What was the largest decrease in salaries between the two years?
min(salaries$change)
# What was the average salary change?
mean(salaries$change)
# For people who did not get a raise, how much money did they lose on average?
mean(salaries$change[!salaries[, "got_raise"]])
# What was the dollar value of the highest raise?
max(salaries[, "change"])
# What was the "name" of the employee who received the highest raise?
salaries[salaries[, "change"] == max(salaries[, "change"]), ]
# For people who did not get a raise, how much money did they lose on average?
mean(salaries[, "change"][!salaries[, "got_raise"]])
# What was the average salary change?
mean(salaries[, "change"])
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries[, "change"] == min(salaries[, "change"]), ]
# What was the 2018 salary of employee 57
salaries[57, "new_salaries"]
# How many employees got a raise?
length(salaries[, "got_raise"][salaries[, "got_raise"]])
getwd()
install.packages("styler")
# Read in the NBA team data of the 2016-2017 season from the data directory
# into a variable called `team.data` using `read.csv`
team_data <- read.csv(data/teams)
# Read in the NBA team data of the 2016-2017 season from the data directory
# into a variable called `team.data` using `read.csv`
team_data <- read.csv(data/teams.csv)
# Read in the NBA team data of the 2016-2017 season from the data directory
# into a variable called `team.data` using `read.csv`
team_data <- read.csv("data/teams.csv")
setwd("~/Work/INFO 201/lab-exercises/week-4")
# Read in the NBA team data of the 2016-2017 season from the data directory
# into a variable called `team.data` using `read.csv`
team_data <- read.csv("data/teams.csv")
# Exercise 7: DPLYR practice with NBA data
# install.packages("dplyr")
library(dplyr)
# The data.frame team.data should now be accessible to you.
# View it, and get some basic information about the number of rows/columns.
# Note the "X" preceding some of the column titles as well as the "*"
# following the names of teams that made it to the playoffs that year.
View(team_data)
# Add a column that gives the turnovers to steals ratio (TOV / STL) for each team
team_data <- mutate(team_data, TOV / STL = tov / stl)
# Add a column that gives the turnovers to steals ratio (TOV / STL) for each team
team_data <- mutate(team_data, "TOV / STL" = tov / stl)
# Add a column that gives the turnovers to steals ratio (TOV / STL) for each team
team_data <- mutate(team_data, "TOV / STL" = TOV / STL)
# Sort the teams from lowest turnover/steal ratio to highest
team_data <- arrange(team_data, "TOV / STL")
# Read in the NBA team data of the 2016-2017 season from the data directory
# into a variable called `team.data` using `read.csv`
team_data <- read.csv("data/teams.csv")
# Add a column that gives the turnovers to steals ratio (TOV / STL) for each team
team_data <- mutate(team_data, TOV_per_STL = TOV / STL)
# Sort the teams from lowest turnover/steal ratio to highest
team_data <- arrange(team_data, TOV_per_STL)
# Get the team that had the highest Total Rebounds (TRB) only with the columns
# Team and TRB  *using one line of code*
filter(team_data, max(TRB))
# Get the team that had the highest Total Rebounds (TRB) only with the columns
# Team and TRB  *using one line of code*
filter(team_data, TRB == max(TRB))
# Print only the name of the team that had the highest total rebounds
most_reb$name
# Get the team that had the highest Total Rebounds (TRB) only with the columns
# Team and TRB  *using one line of code*
most_reb <- filter(team_data, TRB == max(TRB))
# Print only the name of the team that had the highest total rebounds
most_reb$name
# Print only the name of the team that had the highest total rebounds
print(most_reb$Team)
# Read in the NBA team data of the 2016-2017 season from the data directory
# into a variable called `team.data` using `read.csv`
team_data <- read.csv("data/teams.csv", stringsAsFactors = FALSE)
# Add a column that gives the turnovers to steals ratio (TOV / STL) for each team
team_data <- mutate(team_data, TOV_per_STL = TOV / STL)
# Sort the teams from lowest turnover/steal ratio to highest
team_data <- arrange(team_data, TOV_per_STL)
# Get the team that had the highest Total Rebounds (TRB) only with the columns
# Team and TRB  *using one line of code*
most_reb <- filter(team_data, TRB == max(TRB))
# Print only the name of the team that had the highest total rebounds
print(most_reb$Team)
# Read in the Pokemon data from the data directory
# into a variable called `pokemon` using `read.csv`. Remember to not read strings in as factors.
pokemon <- read.csv(data/pokemon, stringsAsFactors = FALSE)
# Read in the Pokemon data from the data directory
# into a variable called `pokemon` using `read.csv`. Remember to not read strings in as factors.
pokemon <- read.csv(data/pokemon.csv, stringsAsFactors = FALSE)
# Read in the Pokemon data from the data directory
# into a variable called `pokemon` using `read.csv`. Remember to not read strings in as factors.
pokemon <- read.csv("data/pokemon.csv", stringsAsFactors = FALSE)
# First, View() the data set to see what info you have to work with
View(pokemon)
# Find all the Pokemon that are "Water" Type 1 (or your favorite)
# Save those rows into a variable called `water.pkm`
water_pkm <- filter(pokemon, Type.1 == "Water")
# Group the pokemon by Type 2 and save into a descriptive variable.
grouped_water <- group(pokemon, Type.2)
# Group the pokemon by Type 2 and save into a descriptive variable.
grouped_water <- group_by(pokemon, Type.2)
# Group the pokemon by Type 2 and save into a descriptive variable.
grouped_pkmn <- group_by(pokemon, Type.2)
View(grouped_pkmn)
View(grouped_pkmn)
# Use summarize() to figure out what the mean (average) speed is for
# each different type in type 2 and what the maximum HP (health point) value is
# within each group.
summarise(group_by(pokemon, Type.2), mean_speed = mean(Speed), max_hp = max(HP))
# Use summarize() to figure out what the mean (average) speed is for
# each different type in type 2 and what the maximum HP (health point) value is
# within each group.
summarise(group_by(pokemon, Type.2), mean_speed = mean(Speed), max_hp = max(HP))
# Use summarize() to figure out what the mean (average) speed is for
# each different type in type 2 and what the maximum HP (health point) value is
# within each group.
summarise(grouped_pkmn, mean_speed = mean(Speed), max_hp = max(HP))
install.packages("utf8")
# Use summarize() to figure out what the mean (average) speed is for
# each different type in type 2 and what the maximum HP (health point) value is
# within each group.
summarise(grouped_pkmn, mean_speed = mean(Speed), max_hp = max(HP))
